import socket, threading
import time
import json
import mysql.connector
import mercadopago
import ast
import re
import smtplib
from email.message import EmailMessage
from pycep_correios import get_address_from_cep, WebService


AcessToken = "APP_USR-8011983104210555-100509-55e70693c2f16375e863300c090c2c69-1121468278"
class ClientThread(threading.Thread):
    def __init__(self,clientAddress,clientsocket):
        threading.Thread.__init__(self)
        self.csocket = clientsocket
        print ("New connection added: ", clientAddress)
    def run(self):
        mydb = mysql.connector.connect(host="localhost",
                                       port="2555",
                                       user="root",
                                       password="",
                                       database="usuarios"
                                       )
        mycursor = mydb.cursor(buffered=True)
        print ("Connection from : ", clientAddress)
        Buscou = 0
        msg = ''
        Connected = 0
        while True:
            try:
                data = self.csocket.recv(2867)
                msg = data.decode()
                time.sleep(0.1)
            except ConnectionRefusedError and ConnectionResetError:
                clientsock.close()
                print(f"Conexão Fechada {clientAddress}")
                break
            if msg[:7] == "Pedidos":
                Carrinho = {}
                produtos = ast.literal_eval(msg[8:])
                print(produtos)
                self.NomeCompleto = (produtos['first_name'])
                self.Cpf = (produtos['cpf'])
                self.Cep = (produtos['cep'])
                self.NumeroResidencia = (produtos['NumeroResidencia'])
                preference_data = {
                    "items": [
                    ],
                }
                i = produtos['items']
                for produtos in i:
                    produtos = dict(produtos)
                    for i in produtos.keys():
                        Sku = i
                        Quantidade = produtos[i]
                        mycursor.execute(f"SELECT * FROM produtos WHERE SKU LIKE '%{Sku}%'")
                        Carrinho[f"{Sku}"] = Quantidade
                        print(Carrinho)
                        for row in mycursor:
                            ValorDoProduto = row[3]
                            UrlImagem = row[0]
                            ValorDoProduto = re.sub(",", ".", ValorDoProduto)
                        address = get_address_from_cep(f'{self.Cep}', webservice=WebService.VIACEP)
                        print(address['logradouro'])
                        InjectJson = {
                            "title": f"Paraná Auto Peças e Acessórios",
                            "quantity": int(Quantidade),
                            "picture_url": f"{UrlImagem}",
                            "description": f"{self.NomeCompleto}\n, {(address['logradouro'])}\n {self.NumeroResidencia}",
                            "unit_price": float(ValorDoProduto)
                        }
                        preference_data['items'].append(InjectJson)
                print(preference_data)
                sdk = mercadopago.SDK(f"{AcessToken}")
                mycursor.execute(f"SELECT * FROM vendas ORDER BY ID ASC")
                for row in mycursor:
                    global ID
                    ID = row[1]
                    ID += 1
                Carrinho = json.dumps(Carrinho)
                mycursor.execute(f"INSERT INTO vendas (CPF, ID, DESPACHADO, STATUS, PEDIDOS) VALUES ('{Cpf}', '{ID}', 'AguardandoPagamento', 'AguardandoPagamento', '{Carrinho}')")
                mydb.commit()
                addId = {"external_reference": f"{ID}"}
                preference_data.update(addId)
                preference_response = sdk.preference().create(preference_data)
                preference = preference_response["response"]
                print(preference)
                preference = preference_response["response"]["init_point"]
                msg = str(preference)
                self.csocket.send(bytes(msg,'UTF-8'))
            elif msg[:7] == "Usuario":
                RequestLogin = ast.literal_eval(msg[8:])
                Email = RequestLogin['Email']
                mycursor.execute(f"SELECT * FROM usuarios WHERE EMAIL= '{Email}'")
                for linha in mycursor.fetchall():
                    Cpf = linha[0]
                    NomeCompleto = linha[1]
                    Cep = linha[2]
                    Telefone = linha[3]
                    NumeroResidencia = linha[4]
                    Email = linha[5]
                    SenhaBd = linha[6]
                msg = {'Cpf': f'{Cpf}', 'NomeCompleto': f'{NomeCompleto}', 'Cep': f'{Cep}', 'Telefone': f'{Telefone}','NumeroResidencia': f'{NumeroResidencia}','Email': f'{Email}','SenhaBd': f'{SenhaBd}'}
                msg = str(msg)
                self.csocket.send(bytes(msg, 'UTF-8'))

            elif msg[:9] == "Pesquisar":
                mydb.reconnect()
                Pesquisa = msg[10:]
                print(Pesquisa)
                mycursor.execute(f"SELECT * FROM produtos WHERE MATCH(TITULO, CATEGORIA, APLICACAO) AGAINST ('+{Pesquisa}' IN BOOLEAN MODE)")
                print(mycursor)
                for row in mycursor:
                    UrlImagem = row[0]
                    TituloProduto = row[2]
                    Sku = row[1]
                    ValorProduto = row[3]
                    QuantidadeEstoque = row[4]
                    Buscou += 1
                    if QuantidadeEstoque == "0":
                        pass
                    elif Buscou <= 20:
                        Descricao = row[5]
                        ValorProduto = re.sub(",", ".", ValorProduto)
                        msg = {'UrlImagem': f'{UrlImagem}', 'TituloProduto': f'{TituloProduto}', 'Sku': f'{Sku}', 'ValorProduto': f'{ValorProduto}','QuantidadeEstoque': f'{QuantidadeEstoque}','Descricao': f'{Descricao}'}
                        msg = str(msg)
                        self.csocket.send(bytes(msg, 'UTF-8'))
                        data = self.csocket.recv(10)
                        msg = data.decode()
                        print(msg)
                    else:
                        Buscou = 0
                        break
                        pass
                Buscou = 0
                msg = str("fim")
                self.csocket.send(bytes(msg, 'UTF-8'))

            elif msg[:12] == "OrdemPedidos":
                mydb.reconnect()
                msg = msg[13:]
                mycursor.execute(f"SELECT * FROM vendas WHERE CPF LIKE '%{msg}%'")
                for row in mycursor.fetchall():
                    self.IDPedido = row[1]
                    self.Despachado = row[2]
                    self.Status = row[3]
                    self.Produtos = row[4]
                    if self.Status == "AguardandoPagamento":
                        self.Status = "Aguardando Pagamento"
                        self.Despachado = ""
                    elif self.Status == "approved":
                        self.Despachado = "Produto em separação"
                        self.Status = "Aprovado"
                    elif self.Status == "solving":
                        self.Despachado = "Em processo de devolução"
                        self.Status = "Devolução"
                    elif self.Status == "refunded":
                        self.Despachado = "Compra Devolvida"
                        self.Status = "Devolução"
                    print(self.IDPedido)
                    msg = {'IDPedido': f'{self.IDPedido}', 'Despachado': f'{self.Despachado}', 'Status': f'{self.Status}','Produtos': f'[{self.Produtos}]'}
                    msg = str(msg)
                    self.csocket.sendall(bytes(msg, 'UTF-8'))
                    time.sleep(0.001)
                    data = self.csocket.recv(10)
                    data = data.decode()
                    print(data)
                time.sleep(0.01)
                msg = "fim"
                self.csocket.send(bytes(msg, 'UTF-8'))
            elif msg[:11] == "EnviarCance":
                ID = msg[23:]
                mydb.reconnect()
                mycursor.execute(f"SELECT * FROM vendas WHERE ID LIKE '{ID}'")
                for row in mycursor:
                    Status = row[3]
                    Pedidos = row[4]
                if Status == "approved":
                    server = smtplib.SMTP('smtp.office365.com', 587)
                    server.starttls()
                    server.login("ParanaAutoPecasDistribuidora@hotmail.com", "cadp2020t")

                    msg = EmailMessage()
                    msg.set_content(f'Pedido de cancelamento de venda:\nID Do pedido: {ID}\nNome do consumidor {NomeCompleto} \nEmail do consumidor: {Email}\nTelefone do consumidor: {Telefone}\n Produtos: {Pedidos}')

                    msg['Subject'] = f'Pedido Cancelamento ID: {ID}, Consumidor: {NomeCompleto}'
                    msg['From'] = "ParanaAutoPecasDistribuidora@hotmail.com"
                    msg['To'] = "ParanaAutoPecasDistribuidora@hotmail.com"

                    server.send_message(msg)
                    server.quit()

                    sql = f"UPDATE vendas SET STATUS = 'solving' WHERE ID = '{ID}'"
                    mycursor.execute(sql)
                    mydb.commit()
                    msg = "Ok"
                    self.csocket.send(bytes(msg, 'UTF-8'))
                else:
                    msg = "Devolução"
                    self.csocket.send(bytes(msg, 'UTF-8'))
                    pass
            elif msg[:11] == "EnviarDefei":
                ID = msg[23:]
                mydb.reconnect()
                mycursor.execute(f"SELECT * FROM vendas WHERE ID LIKE '{ID}'")
                for row in mycursor:
                    Status = row[3]
                    Pedidos = row[4]
                if Status == "approved":
                    server = smtplib.SMTP('smtp.office365.com', 587)
                    server.starttls()
                    server.login("ParanaAutoPecasDistribuidora@hotmail.com", "cadp2020t")

                    msg = EmailMessage()
                    msg.set_content(f'Pedido de Troca de produto com defeito:\nID Do pedido: {ID}\nNome do consumidor {NomeCompleto} \nEmail do consumidor: {Email}\nTelefone do consumidor: {Telefone}\n Produtos: {Pedidos}')

                    msg['Subject'] = f'Pedido de Troca ID: {ID}, Consumidor: {NomeCompleto}'
                    msg['From'] = "ParanaAutoPecasDistribuidora@hotmail.com"
                    msg['To'] = "ParanaAutoPecasDistribuidora@hotmail.com"

                    server.send_message(msg)
                    server.quit()

                    sql = f"UPDATE vendas SET STATUS = 'solving' WHERE ID = '{ID}'"
                    mycursor.execute(sql)
                    mydb.commit()
                    msg = "Ok"
                    self.csocket.send(bytes(msg, 'UTF-8'))
                else:
                    msg = "Devolução"
                    self.csocket.send(bytes(msg, 'UTF-8'))
                    pass
            elif msg[:9] == "Cadastrar":
                RequestLogin = ast.literal_eval(msg[10:])
                self.NomeCompleto = RequestLogin['NomeCompleto']
                self.Email = RequestLogin['Email']
                self.Senha = RequestLogin['Senha']
                self.Telefone = RequestLogin['Telefone']
                self.Cpf = RequestLogin['Cpf']
                self.NumeroResidencia = RequestLogin['NumeroResidencia']
                self.Cep = RequestLogin['Cep']
                mycursor.execute(
                    f"INSERT INTO Usuarios (CPF, NOME, CEP, TELEFONE, NUMERORESIDENCIA, EMAIL, SENHA) VALUES ('{self.Cpf}', '{self.NomeCompleto}', '{self.Cep}', '{self.Telefone}', '{self.NumeroResidencia}', '{self.Email}', '{self.Senha}')")
                mydb.commit()
                print("Ok")
                msg = "Ok"
                self.csocket.send(bytes(msg, 'UTF-8'))
            elif msg == "":
                Connected += 1
            elif Connected == 200:
                clientsock.close()
                print(f"Fechando conexão e desligando a thread {clientAddress}")
                break

HOST = "192.168.1.163"
PORT = 8080
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server.bind((HOST, PORT))
print("Server started")
print("Esperando Conexão de clientes")
while True:
    server.listen(1)
    clientsock, clientAddress = server.accept()
    newthread = ClientThread(clientAddress, clientsock)
    newthread.start()
